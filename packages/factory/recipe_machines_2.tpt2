:import factory constants

:local int tier

tier = 10
tierloop:

gotoif(skipT1, tier == 1)
;tier recursivity
{add_queue(-1 + tier, assembly, max(0., {get_queue(tier, assembly)}))}
{add_queue(-1 + tier, refiner, max(0., {get_queue(tier, refiner)}))}
{add_queue(-1 + tier, mixer, max(0., {get_queue(tier, mixer)}))}
skipT1:

;assembly
{add_queue(1 + min(2, max(0, (tier - 1) / 3)) + tier / 9, chip, max(0., {get_queue(tier, assembly)} * i2d(1 + tier / 10)))}
{add_queue(tier, motor, max(0., {get_queue(tier, assembly)} * i2d(1 + tier / 9)))}
{add_queue(tier, pipe, max(0., {get_queue(tier, assembly)} * i2d(1 + tier / 6)))}
{add_queue(tier, dense_plate, max(0., {get_queue(tier, assembly)} * i2d((3 + tier / 3) * 2 - max(0, min(tier - 1, 3 - tier)))))}

;refiner
{add_queue(1 + (tier + 2) / 5 + tier / 7 + tier / 10, chip, max(0., {get_queue(tier, refiner)} * 2.))}
{add_queue(tier, pump, max(0., {get_queue(tier, refiner)} * i2d(1 + min((tier + 1) / 3, 2) + 2 * (tier / 10))))}
{add_queue(tier, ring, max(0., {get_queue(tier, refiner)} * i2d(1 + min((tier + 1) / 3, 2) + 2 * (tier / 10))))}
{add_queue(tier, motor, max(0., {get_queue(tier, refiner)} * i2d(1 + min((tier + 1) / 3, 2) + 2 * (tier / 10) - min(1, tier - 1))))}
{add_queue(tier, dense_plate, max(0., {get_queue(tier, refiner)} * 4.))}
{add_queue(tier, block, max(0., {get_queue(tier, refiner)} * i2d((3 + min((tier + 1) / 3, 2) + 2 * (tier / 10)) * (tier / 7))))}

;mixer
{add_queue(1 + tier / 4 + tier / 9, chip, max(0., {get_queue(tier, mixer)} * i2d(1 + min(1, tier / 4) + tier / 6)))}
{add_queue(tier, dense_plate, max(0., {get_queue(tier, mixer)} * i2d(5 - min(1, tier - 1) + min(1, tier / 4) + tier / 6)))}
{add_queue(tier, motor, max(0., {get_queue(tier, mixer)} * 2.))}
{add_queue(tier, pump, max(0., {get_queue(tier, mixer)} * i2d(1 + min(1, tier / 4) + tier / 6)))}

tier -= 1
gotoif(tierloop, tier > 0)
wait(0.0)
