:import factory constants

:local int tier

tier = 10
tierloop:

gotoif(skipT1, tier == 1)
;tier recursivity
{add_queue(-1 + tier, belt, max(0., {get_queue(tier, belt)}))}
{add_queue(-1 + tier, shaper, max(0., {get_queue(tier, shaper)}))}
{add_queue(-1 + tier, boiler, max(0., {get_queue(tier, boiler)}))}
skipT1:

;belt
{add_queue((tier - 1) / 2, chip, max(0., {get_queue(tier, belt)} * i2d(min(1, tier / 4) * 4 + tier / 7)))}
{add_queue(tier, insul_cable, max(0., {get_queue(tier, belt)} * i2d(3 + (tier + 3) / 5)))}
{add_queue(1, rubber + tier / 6, max(0., {get_queue(tier, belt)} * i2d(3 + (tier + 3) / 5)))}
{add_queue(tier, motor, max(0., {get_queue(tier, belt)} * i2d(3 + tier / 7)))}

;shaper
{add_queue(tier, plate + tier / 10, max(0., {get_queue(tier, shaper)} * 4.))}
{add_queue(tier, motor, max(0., {get_queue(tier, shaper)} * 2.))}
{add_queue(tier, screw, max(0., {get_queue(tier, shaper)} * i2d(min(2, tier) + tier / 6)))}
{add_queue(tier, insul_cable, max(0., {get_queue(tier, shaper)} * i2d(1 + tier / 6 + 2 * (tier / 10))))}
{add_queue(tier, block + tier / 10, max(0., {get_queue(tier, shaper)} * i2d(min(2, tier) + tier / 6 + 2 * (tier / 10))))}

;boiler
{add_queue(tier, pump, max(0., {get_queue(tier, boiler)}))}
{add_queue(tier, screw, max(0., {get_queue(tier, boiler)} * 2.))}
{add_queue(tier, motor, max(0., {get_queue(tier, boiler)} * i2d(1 + (tier + 1) / 5 + tier / 10)))}
{add_queue(tier, dense_plate, max(0., {get_queue(tier, boiler)}) * i2d(2 + (tier + 1) / 5 + tier / 10))}
{add_queue(tier, wire, max(0., {get_queue(tier, boiler)}) * i2d(2 + (tier + 1) / 5 + tier / 10))}
{add_queue(tier, block, max(0., {get_queue(tier, boiler)} * i2d(4 + min(1, tier - 1) * (3 + (tier + 1) / 5 + tier / 10))))}

tier -= 1
gotoif(tierloop, tier > 0)
