:import factory constants

:local int tier

tier = 10
tierloop:

{add_queue(tier, block, max(0., {get_queue(tier, dense_block)}))}
{add_queue(tier, dense_plate, max(0., ({get_queue(tier, block)}) * i2d(8 + 4 * (tier / 7))))}
{add_queue(tier, plate, max(0., ({get_queue(tier, dense_plate)} - count("plate.stack", tier)) * 9.))}
{add_queue(tier, plate, max(0., {get_queue(tier, pipe)}))}
{add_queue(tier, rod, max(0., ceil({get_queue(tier, screw)} / 4.)))}
{add_queue(tier, cable, max(0., {get_queue(tier, wire)}))}
{add_queue(tier, rod, max(0., {get_queue(tier, ring)}))}

{add_queue(tier, cable, max(0., {get_queue(tier, circuit)}))}
{add_queue(tier, plate, max(0., {get_queue(tier, board)}))}

{add_queue(tier, ingot, max(0., ceil({get_queue(tier, rod)} / 2.)))}
{add_queue(tier, ingot, max(0., ceil({get_queue(tier, cable)} / 2.)))}
{add_queue(tier, ingot, max(0., {get_queue(tier, plate)}))}

{add_queue(tier, dust, max(0., ({get_queue(tier, lump)} - i2d(min(1, 10 - tier)) * count("lump", min(9, tier))) * 4.0))}
{add_queue(tier, dust, max(0., {get_queue(tier, ingot)}))}
{add_queue(tier, ore, max(0., min(count("ore", tier), ceil({get_queue(tier, dust)} / 2.))))}

gotoif(nolumps, tier == 1 | count("ore", tier) + count("dust", tier) == 0.)
{add_queue(tier - 1, lump, max(0., {get_queue(tier, dust)} - {get_queue(tier, ore)} * 2.))}
nolumps:

tier -= 1
gotoif(tierloop, tier > 0)
{add_queue(1, rubber, max(0., {get_queue(1, rubber_plate)}))}
wait(0.0)
