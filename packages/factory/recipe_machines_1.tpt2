:import factory constants

:local int tier

tier = 10
tierloop:

gotoif(skipT1, tier == 1)
;tier recursivity
{add_queue(tier - 1, oven, max(0., {get_queue(tier, oven)}))}
{add_queue(tier - 1, crusher, max(0., {get_queue(tier, crusher)}))}
{add_queue(tier - 1, cutter, max(0., {get_queue(tier, cutter)}))}
skipT1:

;presser
{add_queue(max(1, tier - 1), if(tier == 1, hammer, presser), max(0., {get_queue(tier, presser)} * if(tier == 1, 2., 1.)))}
{add_queue((tier + 2 + tier / 9) / 3, chip, max(0., {get_queue(tier, presser)} * 2.))}
{add_queue(tier, plate, max(0., {get_queue(tier, presser)} * i2d(5 - max(0, 2 - tier) + 2 * min(1, tier / 3) + 2 * (tier / 6))))}
{add_queue(tier, wire, max(0., {get_queue(tier, presser)} * i2d(1 + min(1, tier / 3) + (tier / 6))))}
{add_queue(tier, block, max(0., {get_queue(tier, presser)} * i2d(min(1, tier / 5) * (4 + tier / 6))))}

;oven
{add_queue(tier, plate, max(0., {get_queue(tier, oven)} * i2d((1 + min(3, tier)) * 2)))}
{add_queue(tier, insul_cable, max(0., {get_queue(tier, oven)} * i2d(2 + min(1, tier / 3) + tier / 6)))}
{add_queue(tier, block, max(0., {get_queue(tier, oven)} * i2d((tier / 6) * 2)))}

;crusher
{add_queue(1 + min(1, tier / 4) + 2 * (tier / 9), chip, max(0., {get_queue(tier, crusher)} * i2d(min(2, tier) + tier / 8)))}
{add_queue(tier, motor, max(0., {get_queue(tier, crusher)} * i2d(1 + tier / 8)))}
{add_queue(tier, dense_plate, max(0., {get_queue(tier, crusher)} * i2d(6 + min(2, tier) + tier / 8)))}

;cutter
{add_queue(tier, plate + tier / 8, max(0., {get_queue(tier, cutter)} * 2.))}
{add_queue(tier, dense_plate + tier / 8, max(0., {get_queue(tier, cutter)} * i2d(3 + tier / 6 + 2 * (tier / 10))))}
{add_queue(tier, motor, max(0., {get_queue(tier, cutter)} * i2d(2 + min(2, tier) + tier / 6 + 2 * (tier / 10))))}

tier -= 1
gotoif(tierloop, tier > 0)
wait(0.0)
