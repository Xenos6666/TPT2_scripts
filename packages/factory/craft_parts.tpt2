:import factory constants

:local int tier
:local double previous_amount

tierloop:
tier += 1

previous_amount = count("motor", tier)
craft("motor", tier, {get_queue(tier, motor)})
{subtract_queue(tier, motor, count("motor", tier) - previous_amount)}
nomotor:

previous_amount = count("pump", tier)
craft("pump", tier, {get_queue(tier, pump)})
{subtract_queue(tier, pump, count("pump", tier) - previous_amount)}
nopump:

previous_amount = count("block", tier)
craft("block", tier, {get_queue(tier, block)})
{subtract_queue(tier, block, count("block", tier) - previous_amount)}
noblocks:

previous_amount = count("cable.insulated", tier)
craft("cable.insulated", tier, {get_queue(tier, insul_cable)})
{subtract_queue(tier, insul_cable, count("cable.insulated", tier) - previous_amount)}
noinsulcables:

gotoif(nochips, tier > 5)
previous_amount = count("chip", tier)
craft("chip", tier, {get_queue(tier, chip)})
{subtract_queue(tier, chip, count("chip", tier) - previous_amount)}
nochips:

gotoif(tierloop, tier < 10)

previous_amount = count("hammer", 1)
craft("hammer", 1, {get_queue(1, hammer)})
{subtract_queue(1, hammer, count("hammer", 1) - previous_amount)}
wait(0.0)
