
:name TE2.2:start

; This script registers a script for turbo exec, and exits as soon it confirms
; turbo exec is running.
; When executing this script, it is highly advised to execute it using
; `execute(sync)` as among other things, this guarantees that the cycle counter
; has started and that it is safe to overwrite `turbo.cycles.max` with a new
; maximum value.


; This variable is used to track how many scripts are using turbo exec.
; It's incremented each time `TE2.2:start` is called, and decremented
; every time `TE2.2:stop` is called. When it reaches 0, turbo is stopped
; and waits for the next script to register.
:global int turbo.register

; This variable is used to recieve state information from `<turbo>:register`.
:global string turbo.state

turbo.register += 1 ; Increment the registry counter

; This should guarantee turbo exec is up and is gonna keep running until
; the next call to `TE2.2:stop` (assuming no script interferes or causes
; undefined behavior).
; For instance, if `TE2.2:start` is called shortly before cycles.max is
; reached (due to another script using turbo), without this check it would
; return just as turbo is stopping.
; `goto` is being used here to stay consistent with `TE2.2:stop`.
wait:
goto(if(contains(turbo.state, "running"), end, wait))

; Finishing the script with a noop is important, else the script will get
; stuck on the `goto` even after turbo finished.
wait(0.0)
end:
