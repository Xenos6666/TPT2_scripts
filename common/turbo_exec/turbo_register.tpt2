
:name TE2.2:register

; This script is the main manager script, it runs the main turbo loop when
; needed and sends state information to other scripts.


; This variable is used to track how many scripts are using turbo exec,
; it's incremented each time `TE2.2:start` is called, and decremented
; everytime `TE2.2:stop` is called. When it reaches 0, turbo is stopped
; and waits for the next script to register.
:global int turbo.register

; This variable is used to communicate state with other scripts in turbo,
; there are 4 states possible :
; "stopping" means turbo should stop on the next cycle, this state is used to
;     allow a 1-cycle delay on when `TE2.2:start` needs to be called to
;     guarantee that one and only one frame passed from the last `TE2.2:stop`.
; "active" means that this cycle is a "breaking" cycle, and forces advancing
;     to the next frame. The name is chosen because this is what will usually
;     appear in the variable display when turbo is active.
; "idle" means that turbo is idle and waiting for the next script to register
; "running" means that turbo is currently running. Note that this state will
;     never show in the variable display!
:global string turbo.state

; This variable counts the number of cycles since the beginning of the frame,
; although it does have a delay of a few cycles, this doesn't matter for its
; 2 main applications, which are :
; - making sure turbo doesn't run for too long
; - allowing scripts to calculate how many cycles passed between 2 instructions
:global int turbo.cycles
; This variable determines how many cycles turbo is allowed to run for at most
; on this frame. It is reset each frame. If your script needs turbo to run for
; longer then 200 cycles per frame, you need to set that using this variable.
; To prevent conflicts with other scripts, please make sure to use the
; following instruction to require more cycles :
;
; turbo.cycles.max = max(turbo.cycles.max, turbo.cycles + cycles_you_require)
;
; The reason we add the current number of cycles to the required cycles is
; that turbo exec might have already been running for a while due to another
; script requiring it. If that is the case, we want to make sure we extend
; `turbo.cycles.max` enough to run all the computation and actions we still
; need to do.
;
; There is also a hard-coded limit of 50000 cycles to prevent the game from
; freezing in case a script messed up.
:global int turbo.cycles.max

wakeup()

turbo.register = 0

; Kill TE2.1 scripts if they're present, to avoid compatibility issues.
; TE2.2 and TE2.1 are identical, aside from TE2.2 being in a package, so
; the v2.2 version can handle all the logic.
; Wait one cycle (by setting `turbo.register` first) to avoid script-ordering
; issues; this guarantees that the other scripts have already started, if they
; are present. The stops must also be ordered this way to always work correctly.
stop("TE2.1 register")
stop("TE2.1")

turbo.state = "idle"
turbo.cycles.max = 200
wait:
waituntil(turbo.register > 0) ; Wait for a script to register
skipwait:
execute("TE2.2:counting");

turbo.state = "running"

; Reset cycles.max to its default value at the start of each frame, even if a
; script fails to call `TE2.2:stop` in time, it's better to reset this value
; as the script is already in undefined behavior territory and it's preferable
; to not hold back other scripts because of a defective script.
; Because this is set right after `turbo.state`, even if a script tries to
; overwrite this right after calling `TE2.2:start`, this won't cause a race
; condition (assuming `TE2.2:start` was executed using `execute(sync)`).
turbo.cycles.max = 200

; Wait for conditions to end the frame
waituntil(turbo.register == 0 || turbo.cycles >= min(turbo.cycles.max, 50000))

; This doesn't look like much, but this is the most crucial part of this
; script, by signaling scripts 2 cycle earlier, and going through 4 different
; states, we enable the groundwork for a lot of QOL features and optimizations.
; The reason we need to buffer for 2 cycles is that one of the cycles is used up
; when `execsync("TE2.2:stop")` ends.

turbo.state = "stopping" ; About to change to the next frame
wait(0.0)                ; Buffered instructions
turbo.state = "active"   ; Changing to the next frame on this cycle
turbo.state = "idle"     ; Idle state, waiting for registration

; Save a cycle if registration already happened
goto(if(turbo.register > 0, skipwait, wait))
