
:name turbo stop

; This script is a compatibility script for supporting TE2.1 scripts.
; It performs the same functions as TE2.2:stop, but with a different
; script name.


; This variable is used to track how many scripts are using turbo exec.
; It's incremented each time `turbo start` is called, and decremented
; everytime `turbo stop` is called. When it reaches 0, turbo is stopped
; and waits for the next script to register.
:global int turbo.register

; This variable is used to recieve state information from `<turbo> register`.
:global string turbo.state

; Decrement the registry counter. There intentionally isn't a check for
; negative, because if the calls are unbalanced that behavior should be
; exposed quickly so it can be found and fixed.
turbo.register -= 1

; `turbo.state` first goes through the state "stopping", which happens 1 cycle
; early. By exiting one cycle early, the caller script has a 1 cycle buffer to
; call `turbo start` again to preserve frame continuity, but since the frame
; skip is already planned at that point, even if the caller calls `turbo start`
; right after this exits, the frame will be skipped correctly. This allows more
; versatility in the caller's syntax and can save some crucial lines.
; It is important to use `goto` here instead of `waituntil`, otherwise the extra
; cycle would be consumed by waiting for the extra noop instruction at the end.
wait:
goto(if(turbo.state != "running", end, wait))

; Finishing the script with a noop is important, else the script will get
; stuck on the `goto` even after turbo finished.
wait(0.0)
end:
